// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String      @default("USER")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  incidencias   Incidencia[]
  notificacoes  Notificacao[]
  comentarios   Comentario[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Incidencia {
  id          String   @id @default(cuid())
  titulo      String
  descricao   String
  estado      String   @default("Aberta")
  prioridade  String   @default("Normal")
  criadorId   String
  criador     User     @relation(fields: [criadorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notificacoes Notificacao[]
  comentarios  Comentario[]
}

model Notificacao {
  id          String   @id @default(cuid())
  tipo        String   // "sistema", "comentario", "atribuicao"
  titulo      String
  conteudo    String
  lida        Boolean  @default(false)
  usuarioId   String
  usuario     User     @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  incidenciaId String?
  incidencia  Incidencia? @relation(fields: [incidenciaId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comentario {
  id          String   @id @default(cuid())
  texto       String
  incidenciaId String
  incidencia  Incidencia @relation(fields: [incidenciaId], references: [id], onDelete: Cascade)
  autorId     String
  autor       User     @relation(fields: [autorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
